import utils from "./utils.js";

export default {
    calculateXrange,
    error_
}

// runs for each number  in randomNumbers array, generated by factory function
function calculateXrange( operation, Xposition, number, idx, containerElement){
    // wraper div for each task
    let taskContainer = document.createElement( "div" );
    taskContainer.classList.add( "taskContainer" );
    // p element for each task - holding the task itself
    let p = document.createElement( "p" );
    p.classList.add( "task" );
    // span element for each task - holding the number of the task
    let span = document.createElement( "span" );
    span.classList.add( "number" );
    span.textContent = `${ idx + 1}.)`;

    // input element for each task - user input for result
    let input = document.createElement( "input" );
    input.classList.add( "taskInput" );
    input.setAttribute( "type", "text" );
    input.setAttribute( "size", 30);
    input.setAttribute( "placeholder", "Unesi brojeve, odvoji zarezima" );
    input.setAttribute( "id", `taskInput${idx + 1}` );

    // validate user input - validate button
    let validateButton = document.createElement( "button" );
    validateButton.classList.add( "validateButton" );
    validateButton.textContent = "Proveri";
    validateButton.setAttribute( "id", `validateButton${idx + 1}` );


    taskContainer.prepend( p );
    taskContainer.prepend( span );
    taskContainer.appendChild( input );
    taskContainer.appendChild( validateButton );
    if( Xposition == 0 ){
        p.textContent = ` X ${operation} ${number};      X ∈ `;
    }
    else{
        p.textContent = ` ${number} ${operation} X;      X ∈ `;
    }
    
    // validate user input on button click
    validateButton.addEventListener( "click", function(){
        let userInput = input.value;
        let arrayOfNumbers = userInput.split( "," ).map( number => parseInt( number ) );
        let result = utils.calculateXrangeCheckAnswer( number, arrayOfNumbers, operation );
        if( result ){
            input.classList.remove( "invalidResult" );
            input.classList.add( "validdResult" );
        }
        else{
            input.classList.remove( "validdResult" );
            input.classList.add( "invalidResult" );
        }
    });

    containerElement.appendChild( taskContainer );
}

function error_(e){
    let p = document.createElement( "p" );
    p.classList.add( "error" );
    p.textContent = e.message;  
    containerElement.innerHTML = "";
    containerElement.appendChild( p );
}